{"version":3,"sources":["js/app.js"],"names":["API_KEY","sources","category","heroBannerContent","document","querySelector","gridNews","fetchNews","proxyUrl","api","API_URL","URL","fetch","then","response","json","articles","renderCards","renderGrid","catch","error","console","log","message","fiveArticles","slice","forEach","article","i","html","urlToImage","title","description","author","innerHTML","articleSlice","url","source","name"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,IAAMA,OAAO,GAAG,kCAAhB,EACA;;AACA,IAAMC,OAAO,GAAG,gCAAhB;AACA,IAAMC,QAAQ,GAAG,QAAjB,EAA2B;;AAE3B,IAAMC,iBAAiB,GAAGC,QAAQ,CAACC,aAAT,CAAuB,sBAAvB,CAA1B;AACA,IAAMC,QAAQ,GAAGF,QAAQ,CAACC,aAAT,CAAuB,iBAAvB,CAAjB;;AAEA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACP,OAAD,EAAa;AAC7B,MAAMQ,QAAQ,GAAG,qCAAjB;AACA,MAAMC,GAAG,0DAAmDR,OAAnD,qBAAqED,OAArE,CAAT;AACA,MAAMU,OAAO,GAAG,IAAIC,GAAJ,CAAQF,GAAR,CAAhB;AAEAG,EAAAA,KAAK,CAACF,OAAD,CAAL,CACGG,IADH,CACQ,UAACC,QAAD;AAAA,WAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,GADR,EAEGF,IAFH,CAEQ,UAACE,IAAD,EAAU;AACd,QAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAtB;AACAC,IAAAA,WAAW,CAACD,QAAD,CAAX;AACAE,IAAAA,UAAU,CAACF,QAAD,CAAV;AACD,GANH,EAOGG,KAPH,CAOS,UAACC,KAAD;AAAA,WAAWC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB,CAAX;AAAA,GAPT;AAQD,CAbD;;AAeA,IAAMN,WAAW,GAAG,SAAdA,WAAc,CAACD,QAAD,EAAc;AAChC,MAAIA,QAAJ,EAAc;AACZ,QAAMQ,YAAY,GAAGR,QAAQ,CAACS,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAArB;AACAD,IAAAA,YAAY,CAACE,OAAb,CAAqB,UAACC,OAAD,EAAUC,CAAV,EAAgB;AACnC,UAAIC,IAAI,yDAEeD,CAFf,+EAG4BD,OAAO,CAACG,UAHpC,yFAKoBH,OAAO,CAACI,KAL5B,gEAM8BJ,OAAO,CAACK,WANtC,wDAOuBL,OAAO,CAACM,MAP/B,wDAAR;AAWA9B,MAAAA,iBAAiB,CAAC+B,SAAlB,IAA+BL,IAA/B;AACD,KAbD;AAcD,GAhBD,MAgBO;AACL1B,IAAAA,iBAAiB,CAAC+B,SAAlB,GAA8B,mBAA9B;AACD;AACF,CApBD;;AAsBA,IAAMhB,UAAU,GAAG,SAAbA,UAAa,CAACF,QAAD,EAAc;AAC/B,MAAIA,QAAJ,EAAc;AACZ,QAAMmB,YAAY,GAAGnB,QAAQ,CAACS,KAAT,CAAe,CAAf,EAAkB,EAAlB,CAArB,CADY,CACgC;;AAC5CU,IAAAA,YAAY,CAACT,OAAb,CAAqB,UAACC,OAAD,EAAUC,CAAV,EAAgB;AACnC,UAAIC,IAAI,iCACKF,OAAO,CAACS,GADb,6CAEeR,CAFf,+EAG4BD,OAAO,CAACG,UAHpC,yFAKoBH,OAAO,CAACI,KAL5B,yDAMuBJ,OAAO,CAACU,MAAR,CAAeC,IANtC,sDAAR;AAUAhC,MAAAA,QAAQ,CAAC4B,SAAT,IAAsBL,IAAtB;AACD,KAZD;AAaD,GAfD,MAeO;AACLvB,IAAAA,QAAQ,CAAC4B,SAAT,GAAqB,mBAArB;AACD;AACF,CAnBD;;AAqBA3B,SAAS,CAACP,OAAD,CAAT","file":"app.c3f9f951.js","sourceRoot":"..","sourcesContent":["/*\n * This repo is for education purposes.\n * You are free to copy and use the code as you wish, I only ask you get\n * your own API key at https://newsapi.org/\n * */\n\nconst API_KEY = '4bf001f99d6d424a9b3e683d28593d31';\n// ABC-News, Al-Jazeera-English, ars-technica, associated-press, axios, bleacher-report, bloomberg, breitbart-news, business-insider, buzzfeed, cbs-news, cnn, crypto-coins-news, engadget, entertainment-weekly, espn, fortune, fox-news, fox-sports, google-news, hacker-news, ign, mashable, medical-news-today, msnbc, mtv-news, national-geographic\nconst sources = 'bbc-sport,bleacher-report,espn';\nconst category = 'sports'; // business, entertainment, general, health, science, sports, technology\n\nconst heroBannerContent = document.querySelector('.jsHeroBannerContent');\nconst gridNews = document.querySelector('.news-card-grid');\n\nconst fetchNews = (API_KEY) => {\n  const proxyUrl = 'https://cors-anywhere.herokuapp.com';\n  const api = `https://newsapi.org/v2/top-headlines?sources=${sources}&apiKey=${API_KEY}`;\n  const API_URL = new URL(api);\n\n  fetch(API_URL)\n    .then((response) => response.json())\n    .then((json) => {\n      const articles = json.articles;\n      renderCards(articles);\n      renderGrid(articles);\n    })\n    .catch((error) => console.log(error.message));\n};\n\nconst renderCards = (articles) => {\n  if (articles) {\n    const fiveArticles = articles.slice(0, 5);\n    fiveArticles.forEach((article, i) => {\n      let html = `\n        <div\n          class=\"item item-${i} bg-image-positioner\" \n          style=\"background-image: url('${article.urlToImage}')\">\n            <div class=\"inner\">\n              <h2 class=\"title\">${article.title}</h2>\n              <p class=\"some-description\">${article.description}</p>\n              <span class=\"ribbon\">${article.author}</span>\n            </div>\n        </div>\n      `;\n      heroBannerContent.innerHTML += html;\n    });\n  } else {\n    heroBannerContent.innerHTML = 'no articles sorry';\n  }\n};\n\nconst renderGrid = (articles) => {\n  if (articles) {\n    const articleSlice = articles.slice(5, 30); // dont load first five images as already in use above\n    articleSlice.forEach((article, i) => {\n      let html = `\n        <a href=\"${article.url}\"\n          class=\"item item-${i}  bg-image-positioner\"\n          style=\"background-image: url('${article.urlToImage}')\">\n            <div class=\"inner\">\n              <h2 class=\"title\">${article.title}</h2>\n              <span class=\"ribbon\">${article.source.name}</span>\n            </div>\n        </a>\n      `;\n      gridNews.innerHTML += html;\n    });\n  } else {\n    gridNews.innerHTML = 'no articles sorry';\n  }\n};\n\nfetchNews(API_KEY);\n"]}